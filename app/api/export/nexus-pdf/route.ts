import { type NextRequest, NextResponse } from "next/server"
import jsPDF from "jspdf"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { analysis_id, analysis_data } = body

    if (!analysis_id || !analysis_data) {
      return NextResponse.json({ error: "Missing required parameters" }, { status: 400 })
    }

    // Create PDF
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.width
    const margin = 20
    let yPosition = margin

    // Helper function to add text with word wrap
    const addText = (text: string, fontSize = 12, isBold = false) => {
      pdf.setFontSize(fontSize)
      if (isBold) {
        pdf.setFont(undefined, "bold")
      } else {
        pdf.setFont(undefined, "normal")
      }

      const lines = pdf.splitTextToSize(text, pageWidth - 2 * margin)
      pdf.text(lines, margin, yPosition)
      yPosition += lines.length * (fontSize * 0.4) + 5

      // Check if we need a new page
      if (yPosition > pdf.internal.pageSize.height - margin) {
        pdf.addPage()
        yPosition = margin
      }
    }

    // Title
    addText("FutureValidate - Nexus Research Analysis Report", 20, true)
    yPosition += 10

    // Document details
    addText(`Research Title: ${analysis_data.title}`, 16, true)
    addText(`Source: ${analysis_data.source_firm}`)
    addText(`Document Type: ${analysis_data.document_type.replace("_", " ")}`)
    yPosition += 10

    // Startup Potential Score
    addText(`Startup Potential Score: ${analysis_data.startup_potential_score}/100`, 14, true)
    yPosition += 10

    // Executive Summary
    addText("Executive Summary", 16, true)
    addText(analysis_data.summary)
    yPosition += 10

    // Market Analysis
    addText("Market Analysis", 16, true)
    addText(
      `Total Addressable Market: $${(analysis_data.market_calculations.total_addressable_market / 1000000000).toFixed(1)}B`,
    )
    addText(
      `Serviceable Addressable Market: $${(analysis_data.market_calculations.serviceable_addressable_market / 1000000000).toFixed(1)}B`,
    )
    addText(`Market Growth Rate: ${analysis_data.market_calculations.growth_rate}% CAGR`)
    yPosition += 10

    // Emerging Trends
    addText("Emerging Trends", 16, true)
    analysis_data.emerging_trends.forEach((trend: string) => {
      addText(`• ${trend}`)
    })
    yPosition += 10

    // Startup Ideas
    addText("Identified Startup Opportunities", 16, true)
    analysis_data.startup_ideas.forEach((idea: any, index: number) => {
      addText(`${index + 1}. ${idea.title}`, 12, true)
      addText(idea.description)
      addText(
        `TAM Estimate: $${(idea.tam_estimate / 1000000000).toFixed(1)}B | Viability Score: ${idea.viability_score}/10`,
      )
      yPosition += 5
    })

    // SWOT Analysis
    addText("SWOT Analysis", 16, true)

    addText("Strengths:", 12, true)
    analysis_data.swot_analysis.strengths.forEach((strength: string) => {
      addText(`• ${strength}`)
    })

    addText("Weaknesses:", 12, true)
    analysis_data.swot_analysis.weaknesses.forEach((weakness: string) => {
      addText(`• ${weakness}`)
    })

    addText("Opportunities:", 12, true)
    analysis_data.swot_analysis.opportunities.forEach((opportunity: string) => {
      addText(`• ${opportunity}`)
    })

    addText("Threats:", 12, true)
    analysis_data.swot_analysis.threats.forEach((threat: string) => {
      addText(`• ${threat}`)
    })
    yPosition += 10

    // Strategic Recommendations
    addText("Strategic Recommendations", 16, true)
    analysis_data.strategic_recommendations.forEach((rec: string, index: number) => {
      addText(`${index + 1}. ${rec}`)
    })

    // Footer
    pdf.setFontSize(8)
    pdf.text(
      `Generated by FutureValidate Nexus on ${new Date().toLocaleDateString()}`,
      margin,
      pdf.internal.pageSize.height - 10,
    )

    // Convert to buffer
    const pdfBuffer = Buffer.from(pdf.output("arraybuffer"))

    // Return PDF
    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="Nexus-Analysis-${analysis_data.title.replace(/[^a-zA-Z0-9]/g, "-")}.pdf"`,
      },
    })
  } catch (error) {
    console.error("PDF export error:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
